.main {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
}

.videoPlayer {
  width: 100vw;
  max-width: 100%;
  height: 500px;
  object-fit: cover;
  object-position: center 1px;
}
.videoContainer {
  position: relative;
  font-family: "Century Gothic", serif;
}

.overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
.textLogo{
  margin-left: 4px;
  width: 100px;
}
.homeDescriptionBlock{
  width: 100%;
  max-width: 600px;
  padding: 50px 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
}
.homeDescriptionBlock p{
  text-align: center;
  font-size: 16px;
}
.homeOrderSliderBlock{
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 100%;
}
.logo {
  width: 264px;
  height: 142px;
}

.text {
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: center;
  color: white;
  margin-top: 20px;
}
.text p{
  text-align: center;
  color: white;
  margin-top: 5px;
  font-weight: lighter;
}
.slider {
  position: relative;
  overflow: hidden;
}
.slideContainer {
  display: flex;
  transition: transform 0.5s ease;
}

.blurContainer {
  width: 100vw;
  height: 100%;
  z-index: 0;
}

.blurBackground {
  width: 100%;
  height: 100%;
  object-fit: cover;
  filter: blur(8px);
  }

.slideImg{
  width: 335px;
  max-width: 100%;
  height: 500px;
  object-fit: cover;
  z-index: 4;
  transition: opacity 0.5s ease;
}
.slide-img {
  position: absolute;
  top: 0;
  left: 0;
  transition: opacity 0.5s ease-in-out;
}

.slide-img.previous {
  opacity: 0;
  z-index: -1;
}

.slide-img.current {
  opacity: 1;
  z-index: 1;
}

.sliderOverlay {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  padding: 0 15px;
  width: 325px;
  display: flex;
  align-items: center;
  align-self: flex-end;
  justify-content: space-between;
  pointer-events: none;
  z-index: 10;
}
.arrowSlider {
  width: 35px;
  height: 35px;
  border-radius: 8px;
  background-color: rgba(0, 0, 0, 0.2);
  pointer-events: auto;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 1px solid #dedede;
}

.arrowSliderImg{
  width: 10px;
  margin-left: 1px;
}
.lastArrowSliderImg{
  transform: rotate(-180deg);
  width: 10px;
  margin-right: 1px;
}
.arrowRight {
  width: 20px;
  height: 20px;
  clip-path: polygon(0 0, 100% 50%, 0% 100%);
  background-color: rgb(255, 255, 255);
  pointer-events: auto;
  cursor: pointer;
}
.arrowLeft {
  width: 20px;
  height: 20px;
  clip-path: polygon(0% 50%, 100% 0, 100% 100%);
  background-color: rgb(255, 255, 255);
  pointer-events: auto;
  cursor: pointer;
}
.arrowLeft:hover,
.arrowRight:hover {
  background-color: rgba(255, 255, 255, 1);
}

.marquee {
  --gap: 1rem;
  position: relative;
  display: flex;
  overflow: hidden;
  user-select: none;
  gap: var(--gap);
}

.marquee__content {
  flex-shrink: 0;
  display: flex;
  justify-content: space-around;
  gap: var(--gap);
  min-width: 100%;
}

@keyframes scroll {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(calc(-100% - var(--gap)));
  }
}

@media (prefers-reduced-motion: reduce) {
  .marquee__content {
    animation-play-state: paused !important;
  }
}

/* Reverse animation */
.marquee--reverse .marquee__content {
  animation-direction: reverse;
}

/* Attempt to size parent based on content. Keep in mind that the parent width is equal to both content containers that stretch to fill the parent. */
.marquee--fit-content {
  max-width: fit-content;
}

/* A fit-content sizing fix: Absolute position the duplicate container. This will set the size of the parent wrapper to a single child container. Shout out to Olavi's article that had this solution üëè @link: https://olavihaapala.fi/2021/02/23/modern-marquee.html  */
.marquee--pos-absolute .marquee__content:last-child {
  position: absolute;
  top: 0;
  left: 0;
}

@keyframes scroll-abs {
  from {
    transform: translateX(calc(100% + var(--gap)));
  }
  to {
    transform: translateX(0);
  }
}
